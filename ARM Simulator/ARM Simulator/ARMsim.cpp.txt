/* On my honor, I have neither given nor received unauthorized aid on this assignment. */

#include <string>
#include <iostream>
#include <fstream>
#include <vector>
#include <math.h>
#include <map>
using namespace std;

string leftShift(int n, string instruction);
string rightShift(int n, string instruction);
string twoCompliment(string binary);
int binaryDecoder(string binary, bool immediate);
string decimalToBinary(int decimal);
string bitExtender(string binary, int n);
void printSimulation(map<int, int>& memory, vector<int>& registers, int PC, int count, string instruction, int PCforMemory, ofstream& outputSimulation, int branchPC);
void printDisassembly(vector<string>& listOfInstructions, map<int, int>& memory, vector<int>& registers, map<int, string>& binaryMemory, ofstream& output);

int main(int argc, const char **argv) {
	string instruction;
	int PC = 64;
	ifstream input;
	ofstream output;
	ofstream outputSimulation;
	string fileName(argv[1]);
	vector<int> registers(32, 0);
	vector<string> listOfInstructions;
	map<int, int> indexOfInstrutions;
	map<int, int> memory;
	map<int, string> binaryMemory;
	int end = 0;

	input.open(fileName);

	int count = 0; //Stores instructions in vector
	while (input >> instruction) {
		if (instruction == "10100000000000000000000000000000")
		{
			end = PC;
			PC += 4;
			break;
		}
		listOfInstructions.push_back(instruction);
		indexOfInstrutions.emplace(PC, count);
		count += 1;
		PC += 4;
	}

	int PCforMemory = PC;

	while (input >> instruction) {
		int number = binaryDecoder(instruction, false);
		memory.emplace(PC, number);
		binaryMemory.emplace(PC, instruction);
		PC += 4;
	}
	PC = 64;
	int numOfInstructions = 0;

	output.open("disassembly.txt");
	outputSimulation.open("simulation.txt");
	printDisassembly(listOfInstructions, memory, registers, binaryMemory, output);

	while (input.is_open()) {
		numOfInstructions++;
		instruction = listOfInstructions[indexOfInstrutions[PC]];

		string part;
		int xRegister;
		int number;
		int branchPC = 0;

		if (instruction.substr(0, 3) == "001") { //Category 1
			if (instruction.substr(3, 5) == "10000") { //CBZ
				part = instruction.substr(8, 5);
				xRegister = binaryDecoder(part, false);
				if (registers[xRegister] == 0) { //CBZ is activated
					part = instruction.substr(13, 19);
					part = leftShift(2, part);
					number = binaryDecoder(part, true);
					branchPC = 0;
					branchPC = PC + number;
					PC += 4;
				}
				else { //CBZ is not activated
					PC += 4;
				}
			}
			else if (instruction.substr(3, 5) == "10001") { //CBNZ
				part = instruction.substr(8, 5);
				xRegister = binaryDecoder(part, false);
				if (registers[xRegister] != 0) { //CBNZ is activated
					part = instruction.substr(13, 19);
					part = leftShift(2, part);
					number = binaryDecoder(part, true);
					branchPC = 0;
					branchPC = PC + number;
					PC += 4;
				}
				else { //CBNZ is not activated
					PC += 4;
				}
			}
		}
		else if (instruction.substr(0, 3) == "010") { //Category 2
			if (instruction.substr(3, 7) == "1000000") { //ORRI instruction
				int destination = binaryDecoder(instruction.substr(10, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(15, 5), false);
				firstOperand = registers[firstOperand];
				string binary = decimalToBinary(firstOperand);
				binary = bitExtender(binary, 12);
				string immediate = instruction.substr(20, 12);

				string result;
				for (int i = 0; i < 12; i++)
				{
					if (binary[i] == '1') {
						result += "1";
					}
					else if (immediate[i] == '1') {
						result += "1";
					}
					else {
						result += "0";
					}
				}

				registers[destination] = binaryDecoder(result, false);
				PC += 4;
			}
			else if (instruction.substr(3, 7) == "1000001") { //EORI instruction
				int destination = binaryDecoder(instruction.substr(10, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(15, 5), false);
				firstOperand = registers[firstOperand];
				string binary = decimalToBinary(firstOperand);
				binary = bitExtender(binary, 12);
				string immediate = instruction.substr(20, 12);

				string result;
				for (int i = 0; i < 12; i++)
				{
					if (binary[i] == '1' && immediate[i] == '0') {
						result += "1";
					}
					else if (binary[i] == '0' && immediate[i] == '1') {
						result += "1";
					}
					else {
						result += "0";
					}
				}

				registers[destination] = binaryDecoder(result, false);
				PC += 4;
			}
			else if (instruction.substr(3, 7) == "1000010") { //ADDI instruction
				int destination = binaryDecoder(instruction.substr(10, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(15, 5), false);
				firstOperand = registers[firstOperand];
				string immediate = instruction.substr(20, 12);
				int secondOperand = binaryDecoder(immediate, true);
				int result = firstOperand + secondOperand;
				registers[destination] = result;
				PC += 4;
			}
			else if (instruction.substr(3, 7) == "1000011") { //SUBI instruction
				int destination = binaryDecoder(instruction.substr(10, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(15, 5), false);
				firstOperand = registers[firstOperand];
				string immediate = instruction.substr(20, 12);
				int secondOperand = binaryDecoder(immediate, true);
				int result = firstOperand - secondOperand;
				registers[destination] = result;
				PC += 4;
			}
			else if (instruction.substr(3, 7) == "1000100") { //ANDI
				int destination = binaryDecoder(instruction.substr(10, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(15, 5), false);
				firstOperand = registers[firstOperand];
				string binary = decimalToBinary(firstOperand);
				binary = bitExtender(binary, 12);
				string immediate = instruction.substr(20, 12);

				string result;
				for (int i = 0; i < 12; i++)
				{
					if (binary[i] == '1' && immediate[i] == '1') {
						result += "1";
					}
					else {
						result += "0";
					}
				}

				registers[destination] = binaryDecoder(result, false);
				PC += 4;
			}
		}
		else if (instruction.substr(0, 3) == "011") { //Category 3
			if (instruction.substr(3, 8) == "10100000") { //EOR
				int destination = binaryDecoder(instruction.substr(11, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(16, 5), false);
				firstOperand = registers[firstOperand];
				string binaryFirst = decimalToBinary(firstOperand);
				int secondOperand = binaryDecoder(instruction.substr(21, 5), false);
				secondOperand = registers[secondOperand];
				string binarySecond = decimalToBinary(secondOperand);
				binaryFirst = bitExtender(binaryFirst, 12);
				binarySecond = bitExtender(binarySecond, 12);

				string result;
				for (int i = 0; i < 12; i++)
				{
					if (binaryFirst[i] == '1' && binarySecond[i] == '0') {
						result += "1";
					}
					else if (binaryFirst[i] == '0' && binarySecond[i] == '1') {
						result += "1";
					}
					else {
						result += "0";
					}
				}

				registers[destination] = binaryDecoder(result, false);
				PC += 4;
			}
			else if (instruction.substr(3, 8) == "10100010") { //ADD
				int destination = binaryDecoder(instruction.substr(11, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(16, 5), false);
				firstOperand = registers[firstOperand];
				int secondOperand = binaryDecoder(instruction.substr(21, 5), false);
				secondOperand = registers[secondOperand];
				int result = firstOperand + secondOperand;
				registers[destination] = result;
				PC += 4;
			}
			else if (instruction.substr(3, 8) == "10100011") { //SUB
				int destination = binaryDecoder(instruction.substr(11, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(16, 5), false);
				firstOperand = registers[firstOperand];
				int secondOperand = binaryDecoder(instruction.substr(21, 5), false);
				secondOperand = registers[secondOperand];
				int result = firstOperand - secondOperand;
				registers[destination] = result;
				PC += 4;
			}
			else if (instruction.substr(3, 8) == "10100100") { //AND
				int destination = binaryDecoder(instruction.substr(11, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(16, 5), false);
				firstOperand = registers[firstOperand];
				string binaryFirst = decimalToBinary(firstOperand);
				int secondOperand = binaryDecoder(instruction.substr(21, 5), false);
				secondOperand = registers[secondOperand];
				string binarySecond = decimalToBinary(secondOperand);
				binaryFirst = bitExtender(binaryFirst, 12);
				binarySecond = bitExtender(binarySecond, 12);

				string result;
				for (int i = 0; i < 12; i++)
				{
					if (binaryFirst[i] == '1' && binarySecond[i] == '1') {
						result += "1";
					}
					else {
						result += "0";
					}
				}

				registers[destination] = binaryDecoder(result, false);
				PC += 4;
			}
			else if (instruction.substr(3, 8) == "10100101") { //ORR
				int destination = binaryDecoder(instruction.substr(11, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(16, 5), false);
				firstOperand = registers[firstOperand];
				string binaryFirst = decimalToBinary(firstOperand);
				int secondOperand = binaryDecoder(instruction.substr(21, 5), false);
				secondOperand = registers[secondOperand];
				string binarySecond = decimalToBinary(secondOperand);
				binaryFirst = bitExtender(binaryFirst, 12);
				binarySecond = bitExtender(binarySecond, 12);

				string result;
				for (int i = 0; i < 12; i++)
				{
					if (binaryFirst[i] == '1') {
						result += "1";
					}
					else if (binarySecond[i] == '1') {
						result += "1";
					}
					else {
						result += "0";
					}
				}

				registers[destination] = binaryDecoder(result, false);
				PC += 4;
			}
			else if (instruction.substr(3, 8) == "10100110") { //LSR
				int destination = binaryDecoder(instruction.substr(11, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(16, 5), false);
				firstOperand = registers[firstOperand];
				string binaryFirst = decimalToBinary(firstOperand);
				int secondOperand = binaryDecoder(instruction.substr(21, 5), false);
				secondOperand = registers[secondOperand];
				string binarySecond = decimalToBinary(secondOperand);
				if (binarySecond.size() > 5) {
					binarySecond = binarySecond.substr(binarySecond.size() - 5, 5);
				}
				int number = binaryDecoder(binarySecond, false);
				string result = rightShift(number, binaryFirst);

				registers[destination] = binaryDecoder(result, false);
				PC += 4;
			}
			else if (instruction.substr(3, 8) == "10100111") { //LSL
				int destination = binaryDecoder(instruction.substr(11, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(16, 5), false);
				firstOperand = registers[firstOperand];
				string binaryFirst = decimalToBinary(firstOperand);
				int secondOperand = binaryDecoder(instruction.substr(21, 5), false);
				secondOperand = registers[secondOperand];
				string binarySecond = decimalToBinary(secondOperand);
				if (binarySecond.size() > 5) {
					binarySecond = binarySecond.substr(binarySecond.size() - 5, 5);
				}
				int number = binaryDecoder(binarySecond, false);
				string result = leftShift(number, binaryFirst);

				registers[destination] = binaryDecoder(result, false);
				PC += 4;
			}
		}
		else if (instruction.substr(0, 3) == "100") { //Category 4
			if (instruction.substr(3, 8) == "10101010") { //LDUR
				int destination = binaryDecoder(instruction.substr(11, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(16, 5), false);
				firstOperand = registers[firstOperand];
				int immediate = binaryDecoder(instruction.substr(21, 11), true);
				registers[destination] = memory[firstOperand + immediate];
				PC += 4;
			}
			else if (instruction.substr(3, 8) == "10101011") { //STUR
				int destination = binaryDecoder(instruction.substr(11, 5), false);
				int firstOperand = binaryDecoder(instruction.substr(16, 5), false);
				int immediate = binaryDecoder(instruction.substr(21, 11), true);
				int number = registers[firstOperand];
				memory[number + immediate] = registers[destination];
				PC += 4;
			}
		}

		printSimulation(memory, registers, PC - 4, numOfInstructions, instruction, PCforMemory, outputSimulation, branchPC);
		if (branchPC != 0) {
			PC = branchPC;
		}
		if (PC == end) {
			instruction = "10100000000000000000000000000000";
			numOfInstructions++;
			printSimulation(memory, registers, PC, numOfInstructions, instruction, PCforMemory, outputSimulation, branchPC);
			input.close();
		}

	}
	output.close();
	outputSimulation.close();


}

string leftShift(int n, string instruction) {
	for (int i = 0; i < n; i++)
	{
		instruction += "0";
	}
	return instruction;
}

string rightShift(int n, string instruction) {
	string temp;
	for (int i = 0; i < n; i++)
	{
		temp += "0";
	}
	temp += instruction;
	instruction = instruction.substr(0, instruction.size() - n);
	return instruction;
}

string twoCompliment(string binary) {
	if (binary[0] == '0') {
		return binary;
	}

	bool turnt = false;
	for (int i = binary.size(); i > 0; i--)
	{
		if (binary[i - 1] == '0' && turnt == false) {
			continue;
		}
		else if (binary[i - 1] == '1' && turnt == false) {
			turnt = true;
			continue;
		}

		if (binary[i - 1] == '1' && turnt == true) {
			binary[i - 1] = '0';
		}
		else if (binary[i - 1] == '0' && turnt == true) {
			binary[i - 1] = '1';
		}
	}

	return binary;
}

int binaryDecoder(string binary, bool immediate) {
	bool negative = false;
	if (binary == "11111") {
		return 31;
	}

	if (binary[0] == '1' && immediate) {
		binary = twoCompliment(binary);
		negative = true;
	}

	int xRegister = 0;
	int exponent = 0;
	for (int i = binary.size(); i > 0; i--)
	{
		string temp = binary.substr(i - 1, 1);
		if (binary.substr(i - 1, 1) == "1") {
			xRegister += (int)pow(2, exponent);
		}
		exponent += 1;
	}

	if (negative == false) {
		return xRegister;
	}
	else {
		return -xRegister;
	}
}

string decimalToBinary(int decimal) {
	string binary;
	int digit;

	while (decimal != 0) {
		digit = decimal % 2;
		string temp = to_string(digit);
		temp += binary;
		binary = temp;
		decimal = decimal / 2;
	}
	return binary;
}

string bitExtender(string binary, int n) {
	n = n - binary.size();
	for (int i = 0; i < n; i++)
	{
		string temp = "0";
		temp += binary;
		binary = temp;
	}
	return binary;
}

void printSimulation(map<int, int>& memory, vector<int>& registers, int PC, int count, string instruction, int PCforMemory, ofstream& outputSimulation, int branchPC) {
	map<int, string> registerTools;
	for (int i = 0; i < 32; i++)
	{
		if (i == 31) {
			registerTools.emplace(i, "XZR");
			continue;
		}
		string temp = "X" + to_string(i);
		registerTools.emplace(i, temp);
	}
	
	
	outputSimulation << "--------------------" << endl;
	outputSimulation << "Cycle " << count << ":\t" << PC << "\t";
	if (instruction.substr(0, 3) == "001") {
		if (instruction.substr(3, 5) == "10000") {
			outputSimulation << "CBZ " << registerTools[binaryDecoder(instruction.substr(8, 5), false)] << ", #" << binaryDecoder(instruction.substr(13, 19), true);
		}
		else if (instruction.substr(3, 5) == "10001") {
			outputSimulation << "CBNZ " << registerTools[binaryDecoder(instruction.substr(8, 5), false)] << ", #" << binaryDecoder(instruction.substr(13, 19), true);
		}
	}
	else if (instruction.substr(0, 3) == "010") {
		if (instruction.substr(3, 7) == "1000000") {
			outputSimulation << "ORRI " << registerTools[binaryDecoder(instruction.substr(10, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(15, 5), false)] << ", #" << binaryDecoder(instruction.substr(20, 12), true);
		}
		else if (instruction.substr(3, 7) == "1000001") {
			outputSimulation << "EORI " << registerTools[binaryDecoder(instruction.substr(10, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(15, 5), false)] << ", #" << binaryDecoder(instruction.substr(20, 12), true);
		}
		else if (instruction.substr(3, 7) == "1000010") {
			outputSimulation << "ADDI " << registerTools[binaryDecoder(instruction.substr(10, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(15, 5), false)] << ", #" << binaryDecoder(instruction.substr(20, 12), true);
		}
		else if (instruction.substr(3, 7) == "1000011") {
			outputSimulation << "SUBI " << registerTools[binaryDecoder(instruction.substr(10, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(15, 5), false)] << ", #" << binaryDecoder(instruction.substr(20, 12), true);
		}
		else if (instruction.substr(3, 7) == "1000100") {
			outputSimulation << "ANDI " << registerTools[binaryDecoder(instruction.substr(10, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(15, 5), false)] << ", #" << binaryDecoder(instruction.substr(20, 12), true);
		}
	}
	else if (instruction.substr(0, 3) == "011") {
		if (instruction.substr(3, 8) == "10100000") {
			outputSimulation << "EOR " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
		}
		else if (instruction.substr(3, 8) == "10100010") {
			outputSimulation << "ADD " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
		}
		else if (instruction.substr(3, 8) == "10100011") {
			outputSimulation << "SUB " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
		}
		else if (instruction.substr(3, 8) == "10100100") {
			outputSimulation << "AND " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
		}
		else if (instruction.substr(3, 8) == "10100101") {
			outputSimulation << "ORR " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
		}
		else if (instruction.substr(3, 8) == "10100110") {
			outputSimulation << "LSR " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
		}
		else if (instruction.substr(3, 8) == "10100111") {
			outputSimulation << "LSL " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
		}
	}
	else if (instruction.substr(0, 3) == "100") {
		if (instruction.substr(3, 8) == "10101010") {
			outputSimulation << "LDUR " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", [" << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", #" << binaryDecoder(instruction.substr(21, 11), true) << "]";
		}
		else if (instruction.substr(3, 8) == "10101011") {
			outputSimulation << "STUR " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", [" << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", #" << binaryDecoder(instruction.substr(21, 11), true) << "]";
		}
	}
	else if (instruction == "10100000000000000000000000000000") {
		outputSimulation << "DUMMY";
	}
	
	outputSimulation << endl << endl << "Registers" << endl;
	for (int i = 0; i < registers.size(); i += 8)
	{
		if (i == 0) {
			outputSimulation << "X00:";
		}
		else if (i == 8) {
			outputSimulation << "X08:";
		}
		else if (i == 16) {
			outputSimulation << "X16:";
		}
		else if (i == 24) {
			outputSimulation << "X24:";
		}

		outputSimulation << "\t" << registers[i] << "\t" << registers[i + 1] << "\t" << registers[i + 2] << "\t" << registers[i + 3] << "\t" << registers[i + 4];
		outputSimulation << "\t" << registers[i + 5] << "\t" << registers[i + 6] << "\t" << registers[i + 7] << endl;
	}

	outputSimulation << endl;
	outputSimulation << "Data" << endl;
	int temp = PCforMemory;
	for (int i = 0; i < memory.size(); i++)
	{
		if (i % 8 == 0) {
			outputSimulation << PCforMemory << ":";
		}
		outputSimulation << "\t" << memory[temp + 4 * i];
		if (i % 8 == 7) {
			outputSimulation << endl;
			PCforMemory += 32;
		}
	}
	outputSimulation << endl << endl;
	PC = branchPC;
}

void printDisassembly(vector<string>& listOfInstructions, map<int, int>& memory, vector<int>& registers, map<int, string>& binaryMemory, ofstream& output) {
	map<int, string> registerTools;
	for (int i = 0; i < 32; i++)
	{
		if (i == 31) {
			registerTools.emplace(i, "XZR");
			continue;
		}
		string temp = "X" + to_string(i);
		registerTools.emplace(i, temp);
	}

	for (int i = 0; i < listOfInstructions.size(); i++)
	{
		output << listOfInstructions[i] << "\t" << to_string(64 + 4 * i) << "\t";
		string instruction = listOfInstructions[i];
		if (instruction.substr(0, 3) == "001") {
			if (instruction.substr(3, 5) == "10000") {
				output << "CBZ " << registerTools[binaryDecoder(instruction.substr(8, 5), false)] << ", #" << binaryDecoder(instruction.substr(13, 19), true);
			}
			else if (instruction.substr(3, 5) == "10001") {
				output << "CBNZ " << registerTools[binaryDecoder(instruction.substr(8, 5), false)] << ", #" << binaryDecoder(instruction.substr(13, 19), true);
			}
		}
		else if (instruction.substr(0, 3) == "010") {
			if (instruction.substr(3, 7) == "1000000") {
				output << "ORRI " << registerTools[binaryDecoder(instruction.substr(10, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(15, 5), false)] << ", #" << binaryDecoder(instruction.substr(20, 12), true);
			}
			else if (instruction.substr(3, 7) == "1000001") {
				output << "EORI " << registerTools[binaryDecoder(instruction.substr(10, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(15, 5), false)] << ", #" << binaryDecoder(instruction.substr(20, 12), true);
			}
			else if (instruction.substr(3, 7) == "1000010") {
				output << "ADDI " << registerTools[binaryDecoder(instruction.substr(10, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(15, 5), false)] << ", #" << binaryDecoder(instruction.substr(20, 12), true);
			}
			else if (instruction.substr(3, 7) == "1000011") {
				output << "SUBI " << registerTools[binaryDecoder(instruction.substr(10, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(15, 5), false)] << ", #" << binaryDecoder(instruction.substr(20, 12), true);
			}
			else if (instruction.substr(3, 7) == "1000100") {
				output << "ANDI " << registerTools[binaryDecoder(instruction.substr(10, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(15, 5), false)] << ", #" << binaryDecoder(instruction.substr(20, 12), true);
			}
		}
		else if (instruction.substr(0, 3) == "011") {
			if (instruction.substr(3, 8) == "10100000") {
				output << "EOR " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
			}
			else if (instruction.substr(3, 8) == "10100010") {
				output << "ADD " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
			}
			else if (instruction.substr(3, 8) == "10100011") {
				output << "SUB " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
			}
			else if (instruction.substr(3, 8) == "10100100") {
				output << "AND " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
			}
			else if (instruction.substr(3, 8) == "10100101") {
				output << "ORR " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
			}
			else if (instruction.substr(3, 8) == "10100110") {
				output << "LSR " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
			}
			else if (instruction.substr(3, 8) == "10100111") {
				output << "LSL " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", " << registerTools[binaryDecoder(instruction.substr(21, 5), false)];
			}
		}
		else if (instruction.substr(0, 3) == "100") {
			if (instruction.substr(3, 8) == "10101010") {
				output << "LDUR " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", [" << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", #" << binaryDecoder(instruction.substr(21, 11), true) << "]";
			}
			else if (instruction.substr(3, 8) == "10101011") {
				output << "STUR " << registerTools[binaryDecoder(instruction.substr(11, 5), false)] << ", [" << registerTools[binaryDecoder(instruction.substr(16, 5), false)] << ", #" << binaryDecoder(instruction.substr(21, 11), true) << "]";
			}
		}
		output << endl;
	}

	output << "10100000000000000000000000000000" << "\t" << to_string(64 + 4 * listOfInstructions.size()) << "\tDUMMY" << endl;
	int PCforMemory = 64 + 4 * listOfInstructions.size() + 4;

	for (int i = 0; i < memory.size(); i++)
	{
		output << binaryMemory[PCforMemory] << "\t" << PCforMemory << "\t" << memory[PCforMemory];
		PCforMemory += 4;
		output << endl;
	}
}
 
